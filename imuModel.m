%% gpsModel.m
% Produces simulated imu data given a certain trajectory described by 8.3.1
% in the report.
function [accelReading,gyroReading, magReading] = ... 
    imuModel(acceleration,angularVelocity,orientation,imuFS)
    IMU = imuSensor('accel-gyro-mag','ReferenceFrame', 'ENU'); 
    
    % Accelerometer and Gyroscope Modelled on a ADIS16507-3 IMU
    IMU.Accelerometer = accelparams( ...
        'MeasurementRange',392, ...
        'Resolution',0, ...
        'ConstantBias',[-0.0077, -0.0035, 0.0047], ...
        'AxesMisalignment',0.0003, ...
        'NoiseDensity',0.0022, ...
        'BiasInstability',1.25e-04, ...
        'TemperatureBias', [0 0 0], ...
        'TemperatureScaleFactor', 0, ...
        'RandomWalk', 3.8733e-05);

    IMU.Gyroscope = gyroparams( ...
        'MeasurementRange',34.9066, ...
        'Resolution',0, ...
        'ConstantBias',[-0.0065, 0.0022, -0.0020], ...
        'NoiseDensity',3.1511e-04, ...
        'BiasInstability',5.4438e-05, ...
        'TemperatureBias',[0 0 0], ...
        'TemperatureScaleFactor',0, ...
        'AxesMisalignment',0.0003, ...
        'AccelerationBias',0, ...
        'RandomWalk',4.4108e-06);    

    % Magnetometer Modelled on QMC6310 Magnetometer
    IMU.Magnetometer = magparams( ...
        'MeasurementRange',10, ...
        'Resolution',0, ...
        'ConstantBias',0, ...
        'AxesMisalignment', 0, ...
        'NoiseDensity',8.0936e-04, ...
        'BiasInstability',0.0011, ...
        'RandomWalk',1.6340e-04, ...
        'TemperatureBias',[0 0 0], ...
        'TemperatureScaleFactor',0);

    IMU.SampleRate = imuFS;
    IMU.MagneticField = [0,1,0];

    [accelReading,gyroReading,magReading] = ...
        IMU(acceleration,angularVelocity,orientation);
    accelReading = -accelReading;
end